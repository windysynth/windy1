Yes, you can use the Encoder.h library with interrupts alongside the Teensy Audio library, as the Teensy platform allows for multiple interrupt sources and the Encoder library is specifically designed to work with interrupts on Teensy boards; however, you need to be mindful of potential conflicts and properly manage shared variables between your audio processing and encoder interrupt routines. [1, 2, 3]  
Key points to remember: [1, 2, 3]  

• Interrupt handling: The Encoder library utilizes attachInterrupt to set up interrupt routines for reading encoder changes, which is compatible with the Teensy Audio library. 
• Critical sections: When accessing shared variables between your audio processing code and encoder interrupt routine, use noInterrupts() and interrupts() to temporarily disable interrupts to avoid race conditions. 
• Volatile variables: If you need to read or modify variables within the interrupt routine that are also accessed in the main loop, declare them as volatile to ensure consistent updates. [1, 2, 3]  

How to implement: 

1. Include libraries: 

   #include <Encoder.h> 

   #include <Audio.h> 


1. Set up encoder pins and interrupt: 

   Encoder encoder(encoderPin1, encoderPin2); 

   attachInterrupt(digitalPinToInterrupt(encoderPin1), encoderISR, FALLING); 


1. Write your encoder interrupt service routine (ISR): 

   void encoderISR() {

       // Read encoder state and update relevant variables

       // Use noInterrupts() if needed to access shared data

   }


1. In your main loop, handle audio processing: 

   void loop() {

       // Audio processing using Teensy Audio functions

       // Access encoder data (if needed) with appropriate synchronization

   }



Generative AI is experimental.

[1] https://www.pjrc.com/teensy/td_libs_Encoder.html[2] https://tttapa.github.io/Control-Surface/Doxygen/da/dc1/FAQ.html[3] https://www.pjrc.com/teensy/td_libs_AudioNewObjects.html

